<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
    EnvDTE.DTE dte = (EnvDTE.DTE) ((IServiceProvider) this.Host).GetService(typeof(EnvDTE.DTE));  
    string strFileName = this.Host.ResolvePath("RxTxTypes.xml");
 
    string strVersion = File.ReadAllText(this.Host.ResolvePath("..\\..\\..\\..\\VERSION"));
    strVersion = strVersion.Trim();

    XDocument xd = XDocument.Load(strFileName );

    XElement eRoot = xd.Root;

#>
using System;
using System.Collections.Generic;
using System.Reflection;



namespace SIGENCEScenarioTool.Models.RxTxTypes
{
    /// <summary>
    /// A class with all known RxTxTypes as static Property.
    /// </summary>
    static public class RxTxTypes
    {
<#
    foreach(XElement eProperty in eRoot.Elements())
    {
        string strPropertyValue = eProperty.Attribute("Value").Value;
        string strPropertyName = eProperty.Attribute("Name").Value;
        string strPropertyDescription = eProperty.Attribute("Description").Value;
#>

        /// <summary>
        /// <#=strPropertyDescription#>.
        /// </summary>
        static public RxTxType <#=strPropertyName#> { get; private set; } = new RxTxType(<#=strPropertyValue#>,"<#=strPropertyName#>","<#=strPropertyDescription#>");
<#
    }
#>

        //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


        /// <summary>
        /// The internal list with all RxTxType's.
        /// </summary>
        static private readonly List<RxTxType> lRxTxTypes = null;


        /// <summary>
        /// Initializes the <see cref="RxTxTypes" /> class.
        /// </summary>
        static RxTxTypes()
        {
            Type tRxTxType = typeof( RxTxType );

            lRxTxTypes = new List<RxTxType>();

            foreach( PropertyInfo pi in typeof( RxTxTypes ).GetProperties( BindingFlags.Public | BindingFlags.Static ) )
            {
                if( pi.PropertyType == tRxTxType )
                {
                    lRxTxTypes.Add( pi.GetValue( null ) as RxTxType );
                }
            }
        }


        /// <summary>
        /// Gets the list with all RxTxType's.
        /// </summary>
        /// <value>
        /// The values.
        /// </value>
        static public IReadOnlyCollection<RxTxType> Values
        {
            get { return lRxTxTypes.AsReadOnly(); }
        }
        

        /// <summary>
        /// Froms the string.
        /// </summary>
        /// <param name="strName">Name of the string.</param>
        /// <returns></returns>
        static public RxTxType FromString( string strName )
        {
            if( string.IsNullOrEmpty( strName ) == false )
            {
                foreach( RxTxType rtt in lRxTxTypes )
                {
                    if( rtt.Name.Equals( strName , StringComparison.CurrentCultureIgnoreCase ) )
                    {
                        return rtt;
                    }
                }
            }

            return RxTxTypes.Unknown;
        }

    } // end static public class RxTxTypes
}
