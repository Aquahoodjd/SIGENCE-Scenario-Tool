<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
/**
 * !!! GENERATED STUFF - DO NOT MODIFY MANUALLY !!!
 */
using SIGENCEScenarioTool.Models;



namespace SIGENCEScenarioTool.Dialogs.Settings.Panels.ViewModels
{
    /// <summary>
    /// 
    /// </summary>
    /// <seealso cref="SIGENCEScenarioTool.Models.AbstractModelBase" />
    internal sealed class GeneralSettingsViewModel : AbstractModelBase
    {
        /// <summary>
        /// The properties
        /// </summary>
        private readonly Properties.Settings properties = Properties.Settings.Default;

        //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<#
    EnvDTE.DTE dte = (EnvDTE.DTE) ((IServiceProvider) this.Host).GetService(typeof(EnvDTE.DTE));  

    string strConfiguration= File.ReadAllText(this.Host.ResolvePath("..\\..\\..\\..\\..\\Properties\\Settings.settings"));
    XDocument xd = XDocument.Parse(strConfiguration);

    XElement eRoot = xd.Root;

    XName setting = XName.Get( "Setting", "http://schemas.microsoft.com/VisualStudio/2004/01/settings" );
    XName value = XName.Get( "Value", "http://schemas.microsoft.com/VisualStudio/2004/01/settings" );

    foreach(XElement eSetting in eRoot.Descendants( setting ))
    {
        string strScope = eSetting.Attribute( "Scope").Value;

        if(strScope != "User")
        {
            continue;
        }

        string strName = eSetting.Attribute( "Name" ).Value;
        string strType = eSetting.Attribute( "Type" ).Value;
#>

        /// <summary>
        ///
        /// </summary>
        /// <value>
        ///
        /// </value>
        public <#=strType#> <#=strName#>
        {
            get { return this.properties.<#=strName#>; }
            set
            {
                if(this.properties.<#=strName#> != value)
                {
                    this.properties.<#=strName#> = value;

                    FirePropertyChanged();
                }
            }
        }

<#
            }
#>    
    } // end internal sealed class GeneralSettingsViewModel
}
