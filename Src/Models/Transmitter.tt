<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
    EnvDTE.DTE dte = (EnvDTE.DTE) ((IServiceProvider) this.Host).GetService(typeof(EnvDTE.DTE));  
    string strFileName = this.Host.ResolvePath("Transmitter.xml");
#>

/**
 * SourceFile     : <#=strFileName#>
 * Timestamp      : <#=DateTime.Now.ToString("dd.MM.yyyy, HH:mm") #>
 * User           : <#=Environment.UserName #>
 * Host           : <#=Environment.MachineName #>
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Media.Imaging;
using System.Xml.Linq;

using GMap.NET;

using TransmitterTool.Extensions;


<#
    XDocument xd = XDocument.Load(strFileName );

    XElement eRoot = xd.Root;
#>

namespace TransmitterTool.Models
{
    ///<summary>
    /// Generated Model Class from <#=new FileInfo(strFileName).Name#>.
    ///</summary>
    sealed public class <#=eRoot.Name#> : IEquatable<<#=eRoot.Name#>>, INotifyPropertyChanged, ICloneable
    {

        #region Instance Properties
<#
    foreach(XElement eProperty in eRoot.Elements())
    {
        string strPropertyType = eProperty.Attribute("Type").Value;
        string strPropertyName = eProperty.Attribute("Name").Value;

        XAttribute xInitValue = eProperty.Attribute("Init");

        string strDefaultValue = "";
        
        if(xInitValue != null)
        {
            strDefaultValue = string.Format(" = {0}",xInitValue.Value);
        }
#>

        #region <#=strPropertyName#>

        ///<summary>
        /// The PropertyName As ReadOnly String For <#=strPropertyName#>.
        ///</summary>
        public const String <#=strPropertyName.ToUpper()#> = "<#=strPropertyName#>";

        ///<summary>
        /// The DefaultValue For <#=strPropertyName#>.
        ///</summary>
        static public readonly <#=strPropertyType#> DEFAULT_<#=strPropertyName.ToUpper()#><#=strDefaultValue#>;
        
        ///<summary>
        /// The Internal Field For <#=strPropertyName#>.
        ///</summary>
        private <#=strPropertyType#> _<#=strPropertyName#><#=strDefaultValue#>;

        ///<summary>
        /// <#=strPropertyName#> As <#=strPropertyType#>.
        ///</summary>
        public <#=strPropertyType#> <#=strPropertyName#> 
        {
            get { return _<#=strPropertyName #>; }
            set
            {
                _<#=strPropertyName #> = value;
                FirePropertyChanged();
            }
        }

        #endregion        

        <#
            if(eProperty!= eRoot.LastNode) {#>//---------------------------------------------------------------------
<#}
}
#>
#endregion

        //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


        public XElement ToXml()
        {
            return new XElement("<#=eRoot.Name#>",

<#

        foreach(XElement e in eRoot.Elements())
        {
            //string strPropertyType = e.Attribute("Type").Value;
            string strPropertyName = e.Attribute("Name").Value;
#>
                XElementExtension.GetXElement("<#=strPropertyName#>", <#=strPropertyName #>)<#if(e!= eRoot.LastNode) {#>,
<#}
        }
#>
  
            );
        }


        static public <#=eRoot.Name#> FromXml(XElement eRoot)
        {
            XElement eChild = null;

            if (eRoot.Name.LocalName.Equals("<#=eRoot.Name#>"))
            {
                eChild = eRoot;
            }
            else
            {
                eChild = eRoot.Element("<#=eRoot.Name#>");
            }

            return new <#=eRoot.Name#>
            {
<#

        foreach(XElement e in eRoot.Elements())
        {
            string strPropertyType = e.Attribute("Type").Value;
            string strPropertyName = e.Attribute("Name").Value;
            XAttribute xInitValue = e.Attribute("Init");

            string strDefaultValue = "null";
        
            if(xInitValue!=null)
            {
                strDefaultValue = xInitValue.Value;
            }

#>
                <#=strPropertyName #> = eChild.GetProperty<<#=strPropertyType #>>("<#=strPropertyName#>",<#=strDefaultValue#>)<#if(e!= eRoot.LastNode) {#>,
<#}
        }
#>
            
            };
        }

        //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


        public bool Equals(<#=eRoot.Name#> other)
        {
            if (other == null)
            {
                return false;
            }
<#

        foreach(XElement e in eRoot.Elements())
        {
            string strPropertyType=e.Attribute("Type").Value;
            string strPropertyName=e.Attribute("Name").Value;

            if(strPropertyType=="MapPoint")
        {
#>

            if (other.<#=strPropertyName#> == null && <#=strPropertyName#> != null)
            {
                return false;
            }

            if (other.<#=strPropertyName#> != null && <#=strPropertyName#> == null)
            {
                return false;
            }

            if (other.<#=strPropertyName#> != null && <#=strPropertyName#> != null && other.<#=strPropertyName#>.IsEqual(<#=strPropertyName#>) == false)
            {
                return false;
            }
<#
        }
        else
        {
#>

            if (<#=strPropertyName#> != other.<#=strPropertyName#> )
<#
#>
            {
                return false;
            }
<#
        }
    }
 #>

            return true;
        }

        //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return string.IsNullOrEmpty(Name) ? "Unknown" : Name;
        }

        //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public <#=eRoot.Name#> Clone()
        {
            return (<#=eRoot.Name#>)this.MemberwiseClone();
        }


        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        object ICloneable.Clone()
        {
            return this.MemberwiseClone();
        }

        //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


        /// <summary>
        /// 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;


        /// <summary>
        /// 
        /// </summary>
        /// <param name="strPropertyName"></param>
        private void FirePropertyChanged([CallerMemberName]string strPropertyName = null)
        {
            // Wir cachen das Event lokal da es während der Abfrage in der if Anweisung und
            // dem eigentlichen Ausführen zurückgesetzt werden könnte und somit eine Exception
            // hervorgerufen werden könnte obwohl wir es ja überprüft haben.
            var temp = PropertyChanged;

            if (temp != null)
            {
                temp(this, new PropertyChangedEventArgs(strPropertyName));
            }
        }

    } // end sealed public class <#=eRoot.Name#>
}